{"version":3,"sources":["redux/contacts/contactAction.js","redux/contacts/contactReducer.js","redux/contacts/rootReducer.js","redux/store.js","redux/contacts/contactOperations.js","redux/contacts/contactsSelector.js","components/phoneForm/PhoneForm.js","components/filter/Filter.js","components/singleContact/SingleContact.js","components/contactList/ContactList.js","components/app/App.js","index.js"],"names":["getContactsRequest","createAction","getContactsSuccess","getContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","handleFilter","payload","target","value","items","createReducer","state","filter","contact","id","combineReducers","store","configureStore","reducer","contacts","rootReducer","devTools","process","axios","defaults","baseURL","itemsSelector","filterSelector","getFilteredContact","createSelector","name","toLowerCase","includes","getContactById","contactId","find","PhoneForm","formInitialState","number","alert","inputHandler","setState","submitHandler","e","preventDefault","props","toggleAlert","reset","addContact","status","this","CSSTransition","in","classNames","timeout","unmountOnExit","onEntered","onClick","className","onSubmit","type","placeholder","onChange","Component","mapDispatchToProps","dispatch","a","post","result","data","connect","ownProps","deleteContact","delete","TransitionGroup","component","map","App","animation","onGetContacts","appear","length","get","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cc19e024.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\n\nexport const getContactsRequest = createAction('@contact/getRequest');\nexport const getContactsSuccess = createAction('@contact/getSuccess');\nexport const getContactsError = createAction('@contact/getError');\n\nexport const addContactRequest = createAction('@contact/addRequest');\nexport const addContactSuccess = createAction('@contact/addSuccess');\nexport const addContactError = createAction('@contact/addError');\n\nexport const deleteContactRequest = createAction('@contact/deleteRequest');\nexport const deleteContactSuccess = createAction('@contact/deleteSuccess');\nexport const deleteContactError = createAction('@contact/deleteError');\n\nexport const handleFilter = createAction('@contact/filter', ({ target }) => ({\n  payload: target.value,\n}));\n","import { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactSuccess,\n  getContactsSuccess,\n  deleteContactSuccess,\n  handleFilter,\n} from './contactAction';\n\nconst removeContact = (state, { payload }) =>\n  state.filter(contact => contact.id !== payload);\n\nexport const items = createReducer([], {\n  [getContactsSuccess]: (state, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: removeContact,\n});\nexport const filter = createReducer('', {\n  [handleFilter]: (state, { payload }) => (state = payload),\n});\n","import { combineReducers } from 'redux';\nimport { items, filter } from './contactReducer';\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './contacts/rootReducer';\n\nconst store = configureStore({\n  reducer: { contacts: rootReducer },\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nexport default store;\n","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  getContactsRequest,\n  getContactsSuccess,\n  getContactsError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n} from './contactAction';\n\naxios.defaults.baseURL = 'http://localhost:2000';\n\nexport const getContacts = () => async dispatch => {\n  dispatch(getContactsRequest());\n  try {\n    const result = await axios.get('/contacts');\n    dispatch(getContactsSuccess(result.data));\n  } catch (error) {\n    dispatch(getContactsError(error));\n  }\n};\n\nexport const addContact = (name, number) => async dispatch => {\n  dispatch(addContactRequest());\n  try {\n    const result = await axios.post('/contacts', {\n      name,\n      number,\n    });\n    dispatch(addContactSuccess(result.data));\n  } catch (error) {\n    dispatch(addContactError(error));\n  }\n};\n\nexport const deleteContact = id => async dispatch => {\n  dispatch(deleteContactRequest());\n  try {\n    await axios.delete(`/contacts/${id}`);\n    dispatch(deleteContactSuccess(id));\n  } catch (error) {\n    dispatch(deleteContactError(error));\n  }\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const itemsSelector = state => state.contacts.items;\nexport const filterSelector = state => state.contacts.filter;\n\nexport const getFilteredContact = createSelector(\n  [itemsSelector, filterSelector],\n  (items, filter) => {\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  },\n);\n\nexport const getContactById = createSelector(\n  [itemsSelector, (state, contactId) => contactId],\n  (items, contactId) => items.find(contact => contact.id === contactId),\n);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport { addContact } from '../../redux/contacts/contactOperations';\nimport {\n  filterSelector,\n  itemsSelector,\n} from '../../redux/contacts/contactsSelector';\nimport './PhoneForm.css';\n\nclass PhoneForm extends Component {\n  formInitialState = {\n    name: '',\n    number: '',\n  };\n\n  state = {\n    ...this.formInitialState,\n    alert: false,\n  };\n\n  inputHandler = ({ target }) => {\n    const { value, name } = target;\n\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  submitHandler = e => {\n    const { name, number, alert } = this.state;\n    e.preventDefault();\n\n    const { contacts } = this.props;\n    const isExists = contacts.find(contact => contact.name === name);\n\n    if (isExists) {\n      this.toggleAlert(alert);\n      return this.reset();\n    }\n\n    this.props.addContact(name, number);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ ...this.formInitialState });\n  };\n\n  toggleAlert = status => {\n    this.setState({ alert: !status });\n  };\n\n  render() {\n    const { name, number, alert } = this.state;\n    const alertDelay = () => this.setState({ alert: !alert });\n\n    return (\n      <>\n        <CSSTransition\n          in={alert}\n          classNames=\"alert\"\n          timeout={1500}\n          unmountOnExit\n          onEntered={alertDelay}\n        >\n          <button\n            onClick={this.toggleAlert}\n            className=\"alert\"\n          >{`Contact already exists!`}</button>\n        </CSSTransition>\n        <form className=\"contacts_form\" onSubmit={this.submitHandler}>\n          <label className=\"input_name\">\n            Name\n            <br></br>\n            <input\n              className=\"input_form\"\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Add name\"\n              value={name}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br></br>\n          <label className=\"input_name\">\n            Number\n            <br></br>\n            <input\n              className=\"input_form\"\n              type=\"text\"\n              name=\"number\"\n              placeholder=\"Add phone number\"\n              value={number}\n              onChange={this.inputHandler}\n            />\n          </label>\n          <br></br>\n          <button type=\"submit\" className=\"submitBtn\">\n            Create contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: itemsSelector(state),\n  filter: filterSelector(state),\n});\n\nconst mapDispatchToProps = {\n  addContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhoneForm);\n\nPhoneForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.number,\n      number: PropTypes.string,\n    }),\n  ).isRequired,\n  filter: PropTypes.string.isRequired,\n  addContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { handleFilter } from '../../redux/contacts/contactAction';\nimport { filterSelector } from '../../redux/contacts/contactsSelector';\nimport './Filter.css';\n\nconst Filter = ({ filter, handleFilter }) => {\n  return (\n    <div className=\"filter_box\">\n      <label className=\"input_label\">\n        Find contacts by name\n        <br></br>\n        <input\n          className=\"filter_form\"\n          type=\"text\"\n          name=\"filter\"\n          placeholder=\"Find contact\"\n          value={filter}\n          onChange={handleFilter}\n        />\n      </label>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => ({\n  filter: filterSelector(state),\n});\n\nconst mapDispatchToProps = {\n  handleFilter,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n\nFilter.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.string,\n      number: PropTypes.string,\n    }).isRequired,\n  ),\n  filter: PropTypes.string.isRequired,\n  handleFilter: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { deleteContact } from '../../redux/contacts/contactOperations';\nimport { getContactById } from '../../redux/contacts/contactsSelector';\nimport './SingleContact.css';\n\nconst SingleContact = ({ name, number, deleteContact }) => {\n  return (\n    <li className=\"contact\">\n      <h4>{name}</h4>\n      <p>{number}</p>\n      <button className=\"deleteButton\" type=\"button\" onClick={deleteContact}>\n        &#10008;\n      </button>\n    </li>\n  );\n};\nconst mapStateToProps = (state, ownProps) => {\n  const contact = getContactById(state, ownProps.id);\n  return { ...contact };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  deleteContact: () => dispatch(deleteContact(ownProps.id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\n\nSingleContact.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\nimport { getFilteredContact } from '../../redux/contacts/contactsSelector';\nimport SingleContact from '../singleContact/SingleContact';\nimport './ContactList.css';\n\nconst ContactList = ({ contacts }) => {\n  return (\n    <TransitionGroup component=\"ul\" className=\"contact_List\">\n      {contacts.map(({ id }) => (\n        <CSSTransition key={id} classNames=\"list_item\" timeout={250}>\n          <SingleContact id={id} />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\nconst mapStateToProps = state => ({\n  contacts: getFilteredContact(state),\n});\n\nexport default connect(mapStateToProps)(ContactList);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      id: PropTypes.number,\n      number: PropTypes.string,\n    }),\n  ).isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { getContacts } from '../../redux/contacts/contactOperations';\nimport { itemsSelector } from '../../redux/contacts/contactsSelector';\nimport PhoneForm from '../phoneForm/PhoneForm';\nimport Filter from '../filter/Filter';\nimport ContactList from '../contactList/ContactList';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    animation: false,\n  };\n\n  componentDidMount() {\n    this.props.onGetContacts();\n    this.setState(state => ({\n      animation: !state.animation,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"title-slideIn\"\n          timeout={500}\n          unmountOnExit\n        >\n          <h1 className=\"app_title\">Phonebook</h1>\n        </CSSTransition>\n\n        <PhoneForm />\n\n        {this.props.contacts.length === 0 && (\n          <>\n            <h2 className=\"contact_title\">Contacts</h2>\n            <p>Contacts list is empty. Please, create new cotnact!</p>\n          </>\n        )}\n\n        <CSSTransition\n          in={this.props.contacts.length > 1}\n          classNames=\"filter_animation\"\n          timeout={250}\n          unmountOnExit\n        >\n          <Filter />\n        </CSSTransition>\n\n        <ContactList />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: itemsSelector(state),\n});\nconst mapDispatchToProps = {\n  onGetContacts: getContacts,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './components/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}